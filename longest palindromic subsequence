// A Dynamic Programming based C++ program for LPS problem 
// Returns the length of the longest palindromic subsequence in seq 

#include <iostream>
#include<stdio.h> 
#include<string.h> 
using namespace std ; 
// A utility function to get max of two integers 
int max (int x, int y) { return (x > y)? x : y; } 

// Returns the length of the longest palindromic subsequence in seq 
int lps(char str[]) 
{ 
int n = strlen(str); 
int i, j, cl;             	// 	cl :  is length of  substring 
int L[n][n]; // Create a table to store results of subproblems 


// Strings of length 1 are palindrome of lentgh 1 
for (i = 0; i < n; i++) 
L[i][i] = 1;       // fill the diagonal with (1) 

	// Build the table. Note that the lower diagonal values of table are 
	// useless and not filled in the process. The values are filled in a 
	// manner similar to Matrix Chain Multiplication DP solution (See 
	// https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/). 

	// 	cl :  is length of  substring 
	for (cl = 2; cl <= n; cl++) 
	{ 
		for (i = 0; i < n - 1; i++)                  // we can make it (i < n - cl + 1 ) 
		{ 
			j = i + cl - 1;                            // first iteration  j = 0 + 2 - 1 = 1  and so on 
			
			if (str[i] == str[j] && cl == 2) 
			L[i][j] = 2; 
			
			else if (str[i] == str[j]) 
			// if the same char look diagonaly across
			L[i][j] = L[i+1][j-1] + 2; 
			else
			// if the not same char  find the max 
			L[i][j] = max(L[i][j-1], L[i+1][j]); 
		} 
	} 

	return L[0][n-1];    // return the answer for complete string 
} 

/* Driver program to test above functions */
int main() 
{ 
	char seq[] = "GEEKS FOR GEEKS"; 
//	int n = strlen(seq); 
	cout<< "The length of the LPS is " << lps(seq) <<endl ; 
 // cout << 	getchar(); 
	return 0; 
} 



//--------------------------------------------------------other way to solve 



/*
#include<iostream>

#include<string.h> 
using namespace std;



class Solution {
    
    
    
    
public:


int max(int x ,int y )
    {
        return (x > y)? x : y ;
    }
   
    int longestPalindromeSubseq(string s) {
        int len = s.length();
        int i , j , cl ; 
        int L[len][len] ;
        
        for( i = 0 ; i <= len ; i++)
        {
            L[i][i] = 1 ; 
        }
        
        for (cl = 2 ; cl <=len  ; cl++)
        {
            for (i = 0 ; i < len-1 ; i++)    // n-cl+1
            {
                
            j = i + cl - 1; 
            
            if(s[i] == s[j] && cl == 2)
            L[i][j] = 2 ; 
            else if(s[i] == s[j])   // same char 
            L[i][j] = L[i+1][j-1] + 2 ;
            else  // not same 
            L[i][j] = max(L[i][j-1] , L[i+1][j]);
            
            }
            
            
        }
        return L[0][len-1]; 
    }
       
};





int main()
{
    Solution k ;
    string m ;
    cin >> m;
    cout<<k.longestPalindromeSubseq(m);
}

*/
